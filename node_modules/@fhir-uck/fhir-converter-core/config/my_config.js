const uuid = require('uuid');
const organizationId = uuid.v4();

module.exports.config = {
    name: 'my_config',
    version: '1.0.0',
    fhirServerBaseUrl: 'https://twcore.hapi.fhir.tw/',
    action: 'return',
    fhir_version: 'R4',
    validate: false
}

module.exports.globalResource = {
    Organization: {
        resourceType: 'Organization',
        identifier: [
            {   
                type: {
                    coding: [
                        {
                            system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
                            code: 'PRN'
                        }
                    ]
                },
                system: 'https://twcore.mohw.gov.tw/ig/twcore/CodeSystem/organization-identifier-tw',
                value: '0602030026'
            }
        ],
        active: true,
        name: '高雄榮民總醫院',
    },
    Patient: {
        resourceType: 'Patient',
        meta: {
            profile: [
                'https://twcore.mohw.gov.tw/ig/twcore/StructureDefinition/Patient-twcore'
            ]
        },
        id: '#Patient.patientId',
        identifier: [
            {
                system: 'http://hospital.local/patient-id',
                value: '#Patient.patientId'
            }
        ],
        name: [{
            use: 'official',
            family: '#Patient.LastName',
            given: ['#Patient.FirstName']
        }],
    gender: '#Patient.gender',
        birthDate: '#Patient.BirthDate',
        managingOrganization: {
            reference: 'Organization/0602030026'
        }
    },
    ObservationVitalSigns: {
        resourceType: 'Observation',
        meta: {
            profile: [
                'https://twcore.mohw.gov.tw/ig/twcore/StructureDefinition/Observation-vitalSigns-twcore'
            ]
        },
        status: 'final',
        category: [
            {
                coding: [
                    {
                        system: 'http://terminology.hl7.org/CodeSystem/observation-category',
                        code: 'vital-signs',
                        display: 'Vital Signs'
                    }
                ]
            }
        ],
        code: {
            coding: [
                {
                    system: 'http://loinc.org',
                    code: '85353-1',
                    display: 'Vital signs, weight, height, head circumference, oxygen saturation and BMI panel'
                }
            ],
            text: 'Vital Signs Panel'
        },
        subject: { reference: 'Patient/#Patient.patientId' },
        component: [
            {
                code: {
                    coding: [
                        {
                            system: 'http://loinc.org',
                            code: '8302-2',
                            display: 'Body height'
                        }
                    ],
                    text: 'Body Height'
                },
                valueQuantity: {
                    value: '#Observation.heightValue',
                    unit: 'cm',
                    system: 'http://unitsofmeasure.org',
                    code: 'cm'
                }
            },
            {
                code: {
                    coding: [
                        {
                            system: 'http://loinc.org',
                            code: '29463-7',
                            display: 'Body weight'
                        }
                    ],
                    text: 'Body Weight'
                },
                valueQuantity: {
                    value: '#Observation.weightValue',
                    unit: 'kg',
                    system: 'http://unitsofmeasure.org',
                    code: 'kg'
                }
            },
            {
                code: {
                    coding: [
                        {
                            system: 'http://loinc.org',
                            code: '39156-5',
                            display: 'Body mass index (BMI)'
                        }
                    ],
                    text: 'BMI'
                },
                valueQuantity: {
                    value: '#Observation.bmi',
                    unit: 'kg/m2',
                    system: 'http://unitsofmeasure.org',
                    code: 'kg/m2'
                }
            }
        ]
    }
}

module.exports.fields = [
    {
        source: 'patientId',
        target: 'Patient.id'
    },
    {
        source: 'patientId',
        target: 'Patient.identifier[0].value'
    },
    {
        source: 'LastName',
        target: 'Patient.name[0].family'
    },
    {
        source: 'FirstName',
        target: 'Patient.name[0].given[0]'
    },
    {
        source: 'Gender',
        target: 'Patient.gender',
        beforeConvert: g => ({ M: 'male', F: 'female', X: 'unknown' }[g] || 'unknown')
    },
    {
        source: 'BirthDate',
        target: 'Patient.birthDate'
    },
    {
        source: 'Height(cm)',
        target: 'ObservationVitalSigns.component[0].valueQuantity.value'
    },
    {
        source: 'Weight(kg)',
        target: 'ObservationVitalSigns.component[1].valueQuantity.value'
    },
    {
        source: 'bmi',
        target: 'ObservationVitalSigns.component[2].valueQuantity.value'
    }
]

module.exports.beforeProcess = (data) => {
    // 計算 BMI
    if (data.heightValue && data.weightValue) {
        let heightM = data.heightUnit === 'cm' ? data.heightValue / 100 : data.heightValue;
        data.bmi = +(data.weightValue / (heightM * heightM)).toFixed(2);
    }
    return data;
}

module.exports.afterProcess = (bundle) => {
    const organizationEntry = bundle.entry.find(entry => entry.resource.resourceType === 'Organization');
    if (!organizationEntry) {
        bundle.entry.unshift({
            fullUrl: `${module.exports.config.fhirServerBaseUrl}/Organization/${organizationId}`,
            resource: { id: organizationId, ...module.exports.globalResource.Organization },
            request: {
                method: 'PUT',
                url: `Organization/${organizationId}`
            }
        });
    }
    return bundle;
}
